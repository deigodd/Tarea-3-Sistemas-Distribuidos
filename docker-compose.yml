networks:
  redisn:
    driver: bridge

services:
  map-scraper:
    build: ./map-scraper
    container_name: map_scraper_waze
    networks:
      - redisn
    volumes:
      - ./map-scraper:/app

  mongo:
    build: ./bdd
    container_name: mongo_waze
    ports:
      - "27017:27017"
    volumes:
      - ./data:/data
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin123
    networks:
      - redisn
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5

  mongo-express:
    image: mongo-express
    container_name: mongo_express_waze
    restart: always
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=admin123
      - ME_CONFIG_MONGODB_SERVER=mongo
    networks:
      - redisn
    depends_on:
      - mongo

  mongo-exporter:
    build: ./mongo-exporter
    container_name: mongo_exporter
    networks:
      - redisn
    depends_on:
      - mongo
    volumes:
      - ./data:/data
    environment:
      - MONGO_HOST=mongo
      - MONGO_DB=waze_db
      - MONGO_COLLECTION=alertas
      - MONGO_USER=admin
      - MONGO_PASS=admin123

  hadoop-pig:
    build: ./hadoop-pig
    container_name: hadoop_pig_waze
    networks:
      - redisn
    volumes:
      - ./data:/data
      - ./hadoop-pig/scripts:/scripts
      - ./data:/output
    stdin_open: true
    tty: true
    depends_on:
      - mongo-exporter
    command: ["/entrypoint.sh"]
    ports:
      - "8088:8088"
      - "50070:50070"
      - "9000:9000"
      - "19888:19888"
  redis:
    image: bitnami/redis:latest
    restart: always
    container_name: redis_waze
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - REDIS_EXTRA_FLAGS=--maxmemory 2mb --maxmemory-policy allkeys-random
    ports:
      - "6379:6379"
    volumes:
      - redis_data_1:/bitnami/redis/data
    networks:
      - redisn
    depends_on:
      - mongo
      - map-scraper
  redisinsight:
    image: redislabs/redisinsight:latest
    restart: always
    container_name: redisinsight_waze
    volumes:
      - redis-insight:/data
    ports:
      - "5540:5540"
    networks:
      - redisn
    depends_on:
      - redis

  # estos son los enpoint para subir cosas al cache
  redis-cache:
    build: ./redis-cache
    container_name: redis_cache_waze
    restart: always
    ports:
      - "5000:5000"
    networks:
      - redisn
    volumes:
      - ./redis-cache:/app
    depends_on:
      - redis
      - mongo
      - map-scraper

  elastic_setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  es01:
    depends_on:
      elastic_setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=docker-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
    mem_limit: ${ES_MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s http://localhost:9200 | grep -q 'You Know, for Search'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=http://es01:9200
      - XPACK_SECURITY_ENABLED=false
    mem_limit: ${KB_MEM_LIMIT}
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s http://localhost:5601 | grep -q 'kibana redi pal mambo'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  csv_loader_elastic:
    build: ./csv-loader-elastic
    container_name: csv_loader_elastic
    depends_on:
      - kibana
      - es01
    volumes:
      - ./data:/data # para consumir los csv
    environment:
      - ES_HOST=es01
      - ES_PORT=9200
      - ES_INDEX_1=raw_data
      - ES_INDEX_2=processed_data
      - CSV_PATH_1=/data/datos_clean.csv
      - CSV_PATH_2=/data/processed_data.csv/part-r-00000
    restart: "no"

volumes:
  redis_data_1:
    driver: local
  redis-insight:
  # todo de aqu√≠ para abajo es parte de elastic - desde la docu
  certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local
  metricbeatdata01:
    driver: local
  filebeatdata01:
    driver: local
  logstashdata01:
    driver: local
